-- ===========================================
-- CATCHING COACH APP - DATABASE SCHEMA
-- Part 3: Workout Sessions Table
-- ===========================================

-- This table stores every workout session a user completes
-- Tracks progress, completion status, and performance metrics
CREATE TABLE workout_sessions (
    -- Primary identifier for each workout session
    session_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    
    -- Links to which user completed this workout
    user_id UUID NOT NULL REFERENCES user_profiles(user_id) ON DELETE CASCADE,
    
    -- Links to the skills assessment that generated this workout recommendation
    -- This helps us track if workouts are improving the areas we targeted
    assessment_id UUID REFERENCES skills_assessments(assessment_id),
    
    -- ===========================================
    -- WORKOUT PLANNING DATA
    -- ===========================================
    
    -- How long the user planned to workout (in minutes)
    planned_duration INTEGER NOT NULL CHECK (planned_duration > 0),
    
    -- Which equipment they said they had available
    available_equipment JSONB NOT NULL DEFAULT '[]',
    -- Example: ["tennis_balls", "catchers_gear", "tee", "cones"]
    
    -- Which weakness category this workout was designed to target
    target_weakness VARCHAR(20) CHECK (target_weakness IN ('receiving', 'throwing', 'blocking', 'education')),
    
    -- The specific workout structure generated by the AI
    workout_structure JSONB NOT NULL,
    -- Example: {
    --   "warmup": {"duration": 3, "drills": ["dynamic_stretching", "light_throwing"]},
    --   "main_work": {"duration": 15, "category": "blocking", "drills": ["basic_blocking", "blocking_angles"]},
    --   "secondary": {"duration": 8, "drills": ["exchange_drill", "framing_practice"]},
    --   "education": {"duration": 4, "content": ["pitch_recognition_video"]}
    -- }
    
    -- ===========================================
    -- WORKOUT EXECUTION DATA
    -- ===========================================
    
    -- When the workout session started
    started_at TIMESTAMP DEFAULT NOW(),
    
    -- When the workout session was completed (null if not finished)
    completed_at TIMESTAMP,
    
    -- How long they actually worked out (in minutes)
    actual_duration INTEGER CHECK (actual_duration >= 0),
    
    -- Overall completion status
    completion_status VARCHAR(20) DEFAULT 'in_progress' CHECK (
        completion_status IN ('not_started', 'in_progress', 'completed', 'abandoned', 'paused')
    ),
    
    -- Which specific drills were completed
    completed_drills JSONB DEFAULT '[]',
    -- Example: ["dynamic_stretching", "basic_blocking", "exchange_drill"]
    
    -- Which specific drills were skipped and why
    skipped_drills JSONB DEFAULT '[]',
    -- Example: [{"drill": "advanced_blocking", "reason": "too_difficult"}]
    
    -- ===========================================
    -- PERFORMANCE METRICS
    -- ===========================================
    
    -- User's self-reported energy level before workout (1-10)
    pre_workout_energy INTEGER CHECK (pre_workout_energy BETWEEN 1 AND 10),
    
    -- User's self-reported energy level after workout (1-10)
    post_workout_energy INTEGER CHECK (post_workout_energy BETWEEN 1 AND 10),
    
    -- User's self-reported difficulty level (1-10)
    perceived_difficulty INTEGER CHECK (perceived_difficulty BETWEEN 1 AND 10),
    
    -- User's self-reported enjoyment level (1-10)
    enjoyment_rating INTEGER CHECK (enjoyment_rating BETWEEN 1 AND 10),
    
    -- Overall workout effectiveness rating (1-10)
    effectiveness_rating INTEGER CHECK (effectiveness_rating BETWEEN 1 AND 10),
    
    -- ===========================================
    -- VIDEO & PROGRESS TRACKING
    -- ===========================================
    
    -- Videos uploaded during this session (for progress comparison)
    uploaded_videos JSONB DEFAULT '[]',
    -- Example: [
    --   {"drill": "blocking", "video_url": "path/to/video1.mp4", "timestamp": "2024-01-15T10:30:00Z"},
    --   {"drill": "exchange", "video_url": "path/to/video2.mp4", "timestamp": "2024-01-15T10:45:00Z"}
    -- ]
    
    -- Number of videos uploaded this session
    video_count INTEGER DEFAULT 0 CHECK (video_count >= 0),
    
    -- Whether user reviewed previous videos for comparison
    reviewed_previous_videos BOOLEAN DEFAULT FALSE,
    
    -- ===========================================
    -- FEEDBACK & NOTES
    -- ===========================================
    
    -- User's notes about the workout
    user_notes TEXT,
    
    -- User's feedback about what worked well
    positive_feedback TEXT,
    
    -- User's feedback about what could be improved
    improvement_suggestions TEXT,
    
    -- Any injuries or physical limitations noted during workout
    physical_notes TEXT,
    
    -- Weather conditions if outdoor workout
    weather_conditions VARCHAR(50),
    
    -- ===========================================
    -- AI COACHING DATA
    -- ===========================================
    
    -- How the AI coach adjusted the workout during the session
    ai_adjustments JSONB DEFAULT '[]',
    -- Example: [
    --   {"timestamp": "2024-01-15T10:20:00Z", "reason": "user_struggling", "action": "reduced_difficulty"},
    --   {"timestamp": "2024-01-15T10:35:00Z", "reason": "user_excelling", "action": "added_challenge"}
    -- ]
    
    -- AI's assessment of user performance this session
    ai_performance_summary JSONB,
    -- Example: {
    --   "strengths_observed": ["good_blocking_form", "consistent_exchange"],
    --   "areas_for_improvement": ["footwork_speed", "glove_positioning"],
    --   "recommended_focus_next": "throwing_accuracy"
    -- }
    
    -- ===========================================
    -- METADATA
    -- ===========================================
    
    -- When this workout record was created
    created_at TIMESTAMP DEFAULT NOW(),
    
    -- When this workout record was last updated
    updated_at TIMESTAMP DEFAULT NOW()
);

-- ===========================================
-- INDEXES FOR PERFORMANCE
-- ===========================================

-- Index to quickly find all workouts for a user
CREATE INDEX idx_workout_sessions_user_id ON workout_sessions(user_id);

-- Index to find workouts by completion status
CREATE INDEX idx_workout_sessions_completion ON workout_sessions(completion_status);

-- Index to find workouts by date (for progress tracking over time)
CREATE INDEX idx_workout_sessions_date ON workout_sessions(started_at);

-- Index to find recent workouts for a user (most common query)
CREATE INDEX idx_workout_sessions_user_recent ON workout_sessions(user_id, started_at DESC);

-- Index to find workouts that targeted specific weaknesses
CREATE INDEX idx_workout_sessions_target ON workout_sessions(target_weakness);

-- Index to find workouts linked to specific assessments
CREATE INDEX idx_workout_sessions_assessment ON workout_sessions(assessment_id);

-- ===========================================
-- HELPER FUNCTIONS
-- ===========================================

-- Function to calculate completion percentage for a workout
CREATE OR REPLACE FUNCTION calculate_completion_percentage(session_uuid UUID)
RETURNS INTEGER AS $$
DECLARE
    total_drills INTEGER;
    completed_drills_count INTEGER;
    completion_percentage INTEGER;
BEGIN
    -- Count total drills planned in the workout structure
    SELECT jsonb_array_length(
        COALESCE(workout_structure->'warmup'->>'drills', '[]')::jsonb
    ) + jsonb_array_length(
        COALESCE(workout_structure->'main_work'->>'drills', '[]')::jsonb
    ) + jsonb_array_length(
        COALESCE(workout_structure->'secondary'->>'drills', '[]')::jsonb
    ) INTO total_drills
    FROM workout_sessions 
    WHERE session_id = session_uuid;
    
    -- Count completed drills
    SELECT jsonb_array_length(completed_drills) INTO completed_drills_count
    FROM workout_sessions 
    WHERE session_id = session_uuid;
    
    -- Calculate percentage
    IF total_drills > 0 THEN
        completion_percentage := ROUND((completed_drills_count::DECIMAL / total_drills) * 100);
    ELSE
        completion_percentage := 0;
    END IF;
    
    RETURN completion_percentage;
END;
$$ LANGUAGE plpgsql;

-- Function to get workout frequency for a user (workouts per week)
CREATE OR REPLACE FUNCTION get_workout_frequency(user_uuid UUID, weeks_back INTEGER DEFAULT 4)
RETURNS DECIMAL(3,1) AS $$
DECLARE
    workout_count INTEGER;
    frequency DECIMAL(3,1);
BEGIN
    -- Count completed workouts in the specified time period
    SELECT COUNT(*) INTO workout_count
    FROM workout_sessions 
    WHERE user_id = user_uuid 
    AND completion_status = 'completed'
    AND started_at >= NOW() - INTERVAL '1 week' * weeks_back;
    
    -- Calculate average per week
    frequency := ROUND(workout_count::DECIMAL / weeks_back, 1);
    
    RETURN frequency;
END;
$$ LANGUAGE plpgsql;

-- Function to find the most effective workout type for a user
CREATE OR REPLACE FUNCTION find_most_effective_workout_type(user_uuid UUID)
RETURNS TEXT AS $$
DECLARE
    best_category TEXT;
    highest_avg_effectiveness DECIMAL(3,1);
BEGIN
    -- Find category with highest average effectiveness rating
    SELECT target_weakness, AVG(effectiveness_rating) 
    INTO best_category, highest_avg_effectiveness
    FROM workout_sessions 
    WHERE user_id = user_uuid 
    AND completion_status = 'completed'
    AND effectiveness_rating IS NOT NULL
    GROUP BY target_weakness
    ORDER BY AVG(effectiveness_rating) DESC
    LIMIT 1;
    
    RETURN best_category;
END;
$$ LANGUAGE plpgsql;

-- ===========================================
-- EXPLANATION OF KEY CONCEPTS:
-- ===========================================

/*
JSONB DATA TYPE:
- Stores structured data (like arrays and objects) in a flexible format
- workout_structure stores the AI's workout plan
- completed_drills stores which drills were actually done
- uploaded_videos stores video metadata with timestamps

CHECK CONSTRAINTS:
- Ensures ratings stay between 1-10
- Ensures duration is positive
- Ensures completion_status has valid values

FOREIGN KEY RELATIONSHIPS:
- Links to user_profiles (who did the workout)
- Links to skills_assessments (what weakness this workout targeted)
- Maintains data integrity across tables

EXAMPLE WORKOUT SESSION DATA:
session_id: 789e1234-e89b-12d3-a456-426614174222
user_id: 123e4567-e89b-12d3-a456-426614174000
assessment_id: 456e7890-e89b-12d3-a456-426614174111
planned_duration: 30
available_equipment: ["tennis_balls", "catchers_gear", "cones"]
target_weakness: "blocking"
workout_structure: {
  "warmup": {"duration": 3, "drills": ["dynamic_stretching"]},
  "main_work": {"duration": 15, "category": "blocking", "drills": ["basic_blocking", "blocking_angles"]},
  "secondary": {"duration": 8, "drills": ["exchange_drill"]},
  "education": {"duration": 4, "content": ["blocking_fundamentals_video"]}
}
started_at: 2024-01-15 15:30:00
completed_at: 2024-01-15 16:00:00
actual_duration: 28
completion_status: "completed"
completed_drills: ["dynamic_stretching", "basic_blocking", "exchange_drill"]
skipped_drills: [{"drill": "blocking_angles", "reason": "ran_out_of_time"}]
pre_workout_energy: 7
post_workout_energy: 6
perceived_difficulty: 6
enjoyment_rating: 8
effectiveness_rating: 7
video_count: 2
user_notes: "Felt good about blocking form today, exchange needs work"

This shows a 30-minute blocking-focused workout that was mostly completed
with good user feedback and some video uploads for progress tracking.
*/